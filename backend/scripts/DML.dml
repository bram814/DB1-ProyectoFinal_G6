------------ INSERTAR UN ALUMNO ------------
DROP PROCEDURE insert_alumno;
CREATE OR REPLACE PROCEDURE insert_alumno
(
    n1 IN ALUMNO.NOMBRE%TYPE,
    n2 IN ALUMNO.apellido%TYPE,
    n3 IN ALUMNO.carnet%TYPE,
    n4 IN ALUMNO.telefono%TYPE,
    n5 IN ALUMNO.direccion%TYPE,
    n6 IN ALUMNO.correo%TYPE,
    n7 IN ALUMNO.password%TYPE
) 
IS
-- Declaracion de variables locales
icount number;--lo que sea
BEGIN
-- Sentencias
    SELECT count(*) INTO icount FROM ALUMNO WHERE carnet = n3;
    IF icount = 0 then
        INSERT INTO ALUMNO (nombre,apellido,carnet,telefono,direccion,correo,password) 
            VALUES (n1,n2,n3,n4,n5,n6,n7);
    END IF;

--EXCEPTION
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001,
                            'A OCURRIDO UN ERROR AL INSERTAR - ' ||
                            SQLCODE || ' -ERROR- ' || SQLERRM);
END insert_alumno;


-- CALL PROCEDURE
-- BEGIN
--    insert_alumno ('jose1','solorzano1',201800938,'22222222','av b 8','abra8@gmail.com','pass');
-- END;

------------ UPDATE STUDENT ------------
DROP FUNCTION fn_search_student;
CREATE OR REPLACE FUNCTION fn_search_student (pCarnet IN ALUMNO.carnet%TYPE) RETURN ALUMNO.carnet%TYPE 
IS vPass ALUMNO.carnet%TYPE; 
--Declaraci贸n de variables locales
BEGIN
        SELECT carnet INTO vPass
        FROM ALUMNO
        WHERE carnet = pCarnet; 

    RETURN vPass;
END fn_search_student;


DROP PROCEDURE update_alumno;
CREATE OR REPLACE PROCEDURE update_alumno
(
    pNombre    IN ALUMNO.NOMBRE%TYPE,
    pApellido  IN ALUMNO.APELLIDO%TYPE,
    pCarnet    IN ALUMNO.CARNET%TYPE,
    pTelefono  IN ALUMNO.TELEFONO%TYPE,
    pDireccion IN ALUMNO.DIRECCION%TYPE,
    pCorreo    IN ALUMNO.CORREO%TYPE,
    pPassword  IN ALUMNO.PASSWORD%TYPE
) 
IS
-- Declaracion de variables locales
icount number;--lo que sea
BEGIN
-- Sentencias
    IF pNombre <> ' ' THEN

        UPDATE ALUMNO
        SET ALUMNO.NOMBRE = pNombre
        WHERE ALUMNO.CARNET = pCarnet;
    END IF;
    
    IF pApellido <> ' ' THEN
        UPDATE ALUMNO
        SET ALUMNO.APELLIDO = pApellido
        WHERE ALUMNO.CARNET = pCarnet;
    END IF;
    
    IF pTelefono <> ' ' THEN
        UPDATE ALUMNO
        SET ALUMNO.TELEFONO = pTelefono
        WHERE ALUMNO.CARNET = pCarnet;
    END IF;
    
    IF pDireccion <> ' ' THEN
        UPDATE ALUMNO
        SET ALUMNO.DIRECCION = pDireccion
        WHERE ALUMNO.CARNET = pCarnet;
    END IF;
    
    IF pCorreo <> ' ' THEN
        UPDATE ALUMNO
        SET ALUMNO.CORREO = pCorreo
        WHERE ALUMNO.CARNET = pCarnet;
    END IF;

    IF pPassword <> ' ' THEN
        UPDATE ALUMNO
        SET ALUMNO.PASSWORD = pPassword
        WHERE ALUMNO.CARNET = pCarnet;
    END IF;
    
END update_alumno;


--- DELETE STUDENT
DROP PROCEDURE delete_student;
CREATE OR REPLACE PROCEDURE delete_student(pCarnet IN ALUMNO.CARNET%TYPE) IS
BEGIN
-- Sentencias
    DELETE FROM ALUMNO WHERE ALUMNO.CARNET = pCarnet;

END delete_student;

------------ INSERTAR UN MAESTRO ------------
DROP PROCEDURE insert_maestro;
CREATE OR REPLACE PROCEDURE insert_maestro
(
    n1 IN MAESTRO.nombre%TYPE,
    n2 IN MAESTRO.apellido%TYPE,
    n3 IN MAESTRO.telefono%TYPE,
    n4 IN MAESTRO.direccion%TYPE,
    n5 IN MAESTRO.correo%TYPE,
    n6 IN MAESTRO.password%TYPE,
    n7 IN MAESTRO.fecha_nacimiento%TYPE,
    n8 IN MAESTRO.dpi%TYPE
) 
IS
-- Declaracion de variables locales
icount number;--lo que sea
BEGIN

-- Sentencias
    SELECT count(*) INTO icount FROM MAESTRO WHERE dpi = n8;
    IF icount = 0 then
        INSERT INTO MAESTRO (nombre,apellido,telefono,direccion,correo,password,fecha_nacimiento,dpi)
            VALUES (n1,n2,n3,n4,n5,n6,n7,n8);
    END IF;
    
END insert_maestro;


-- BEGIN
--    insert_maestro ('nameMaestro2','apellido','56897412','av b 8','abra8@gmail.com','pass','23-01-01','3033199330108'); 

-- END;


------------ FUNCTION LOGIN ------------
DROP FUNCTION fn_login_student;
CREATE OR REPLACE FUNCTION fn_login_student (pCarnet IN ALUMNO.carnet%TYPE,  pPass IN ALUMNO.password%TYPE) RETURN ALUMNO.password%TYPE 
IS vPass ALUMNO.password%TYPE; 
--Declaraci贸n de variables locales
BEGIN
        SELECT password INTO vPass
        FROM ALUMNO
        WHERE password = pPass AND carnet = pCarnet; 

    RETURN vPass;
END fn_login_student;


DECLARE
    result_fn varchar2;
BEGIN
    result_fn := fn_login_student(201800937,'pass');
    
END;


------------ FUNCTION LOGIN ------------
DROP FUNCTION fn_login_teacher;
CREATE OR REPLACE FUNCTION fn_login_teacher (pDpi IN MAESTRO.dpi%TYPE,  pPass IN MAESTRO.password%TYPE) RETURN MAESTRO.password%TYPE 
IS vPass MAESTRO.password%TYPE; 
--Declaraci贸n de variables locales
BEGIN
        SELECT password INTO vPass
        FROM MAESTRO
        WHERE password = pPass AND dpi = pDpi; 

    RETURN vPass;
END fn_login_teacher;


-- DECLARE
--     result_fn varchar2;
-- BEGIN
--     result_fn := fn_login_teacher(201800937,'pass');
    
-- END;

------------ UPDATE TEACHER ------------
DROP FUNCTION fn_search_teacher;
CREATE OR REPLACE FUNCTION fn_search_teacher (pDpi IN MAESTRO.DPI%TYPE) RETURN MAESTRO.DPI%TYPE 
IS vPass MAESTRO.DPI%TYPE; 
--Declaraci贸n de variables locales
BEGIN
        SELECT fecha_nacimiento INTO vPass
        FROM MAESTRO
        WHERE dpi = pDpi; 

    RETURN vPass;
END fn_search_teacher;



DROP PROCEDURE update_teacher;
CREATE OR REPLACE PROCEDURE update_teacher
(
    pNombre    IN MAESTRO.NOMBRE%TYPE,
    pApellido  IN MAESTRO.APELLIDO%TYPE,
    pTelefono  IN MAESTRO.TELEFONO%TYPE,
    pDireccion IN MAESTRO.DIRECCION%TYPE,
    pCorreo    IN MAESTRO.CORREO%TYPE,
    pPassword  IN MAESTRO.PASSWORD%TYPE,
    pFecha     IN MAESTRO.DPI%TYPE,
    pDpi       IN MAESTRO.DPI%TYPE
) 
IS
BEGIN
-- Sentencias
    IF pNombre <> ' ' THEN

        UPDATE MAESTRO
        SET MAESTRO.NOMBRE = pNombre
        WHERE MAESTRO.DPI = pDpi;
    END IF;
    
    IF pApellido <> ' ' THEN
        UPDATE MAESTRO
        SET MAESTRO.APELLIDO = pApellido
        WHERE MAESTRO.DPI = pDpi;
    END IF;
    
    IF pTelefono <> ' ' THEN
        UPDATE MAESTRO
        SET MAESTRO.TELEFONO = pTelefono
        WHERE MAESTRO.DPI = pDpi;
    END IF;
    
    IF pDireccion <> ' ' THEN
        UPDATE MAESTRO
        SET MAESTRO.DIRECCION = pDireccion
        WHERE MAESTRO.DPI = pDpi;
    END IF;
    
    IF pCorreo <> ' ' THEN
        UPDATE MAESTRO
        SET MAESTRO.CORREO = pCorreo
        WHERE MAESTRO.DPI = pDpi;
    END IF;

    IF pPassword <> ' ' THEN
        UPDATE MAESTRO
        SET MAESTRO.PASSWORD = pPassword
        WHERE MAESTRO.DPI = pDpi;
    END IF;
    
    IF pFecha <> ' ' THEN
        UPDATE MAESTRO
        SET MAESTRO.FECHA_NACIMIENTO =  TO_DATE(pFecha,'YYYY-MM-DD')
        WHERE MAESTRO.DPI = pDpi;
    END IF;

END update_teacher;


-- DELETE TEACHER

DROP PROCEDURE delete_teacher;
CREATE OR REPLACE PROCEDURE delete_teacher(pDpi IN MAESTRO.DPI%TYPE) IS
BEGIN
-- Sentencias
    DELETE FROM MAESTRO WHERE DPI = pDpi;

END delete_teacher;